{
    "override": [
        {
            "name": "function-formatInteger/formatInteger.json_43",
            "ignoreError": true,
            "reason": "Do not support number to word for numbers exceeding the 64-bit range"
        },
        {   
            "name": "range-operator/case021.json",
            "alternateResult": "10000000",
            "reason": "Numerical 1E+7 == 10000000"
        },
        {   
            "name": "range-operator/case024.json",
            "alternateResult": "10000000",
            "reason": "Numerical 1E+7 == 10000000"
        },
        {   "name": "function-parseInteger/parseInteger.json",
            "ignoreError": true,
            "reason": "Ignore all parseInteger cases"
        },
        { 
            "name": "function-formatNumber/case",
            "ignoreError": true,
            "reason": "Ignore all formatNumber cases"
        },
        { 
            "name": "function-fromMillis/isoWeekDate.json",
            "ignoreError": true,
            "reason": "Ignore all fromMillis ISO week date (non-standard picture string X0001) cases"
        },
        { 
            "name": "function-fromMillis/formatDateTime.json_61",
            "ignoreError": true,
            "reason": "Ignore formatDateTime cases + differences in Week 5 of Jan vs Week 0 of Feb"
        },
        { 
            "name": "function-fromMillis/formatDateTime.json_63",
            "ignoreError": true,
            "reason": "Ignore formatDateTime cases + differences in Week 5 of Jan vs Week 0 of Feb"
        },
        { 
            "name": "function-fromMillis/formatDateTime.json_64",
            "ignoreError": true,
            "reason": "Ignore formatDateTime cases + differences in Week 5 of Jan vs Week 0 of Feb"
        },
        { 
            "name": "function-fromMillis/formatDateTime.json_65",
            "ignoreError": true,
            "reason": "Ignore formatDateTime cases + differences in Week 5 of Jan vs Week 0 of Feb"
        },
        { 
            "name": "function-string/case006.json",
            "ignoreError": true,
            "reason": "toString precision should be 15, handled differently by Java Bigdecimal(..., new MathContext(15)"
        },
        { 
            "name": "function-sort/case009.json",
            "ignoreError": true,
            "reason": "the sort expression is evaluated correctly - however the sort algorithm seems to behave slightly different for equality - jsonata expects the native order to be preserved"
        },
        { 
            "name": "function-sort/case0010.json",
            "ignoreError": true,
            "reason": "same as above, works if the condition is changed to >="
        }
    ]
}
